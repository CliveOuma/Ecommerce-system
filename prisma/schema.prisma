datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?         @unique
  hashedPassword  String  
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  authenticator   Authenticator[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  role            Role            @default(USER)
  reviews         Review[]
  orders          Order[]
}

enum Role {
  USER
  ADMIN
}

model Product {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  price           Float
  brand           String
  category        String
  inStock         Boolean
  images          Image[]
  reviews         Review[]
}

model Review {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  userId          String          @db.ObjectId
  productId       String          @db.ObjectId
  rating          Int
  comment         String
  createdAt       DateTime        @default(now())
  product         Product         @relation(fields: [productId], references: [id])
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.String
  accessToken       String? @db.String
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.String
  sessionState      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Authenticator {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  credential        String
  publicKey         String
  counter           Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, credential])
}

model Session {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionId         String    @unique
  userId            String    @db.ObjectId
  userAgent         String?
  ip                String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type Image {
  image String
}

model Order {
   id              String          @id @default(auto()) @map("_id") @db.ObjectId
   userId          String          @db.ObjectId
   amount          Float
   currency        String
   status          String
   deliveryStatus  String?
   createdAt       DateTime         @default(now())
   products        CartProductType[]
   address          Address?

    user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

}
type CartProductType{
    id String
    name String
    description String
    brand String
    category String
    selectedImg Image
    quantity Int
    price Float
}
type Address{
  city  String
  country  String
  line1    String
  line2    String?
  postal_code  String
  state       String
}